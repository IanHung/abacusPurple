{
  "name": "shrinkroute",
  "description": "Easy named routes for Express.",
  "version": "0.2.2",
  "main": "./shrinkroute.js",
  "keywords": [
    "express",
    "route",
    "named",
    "nested",
    "middleware"
  ],
  "author": {
    "name": "Gustavo Henke",
    "url": "https://github.com/gustavohenke"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gustavohenke/shrinkroute.git"
  },
  "bugs": {
    "url": "https://github.com/gustavohenke/shrinkroute/issues"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "qs": "0.6.5",
    "extend": "1.2.x"
  },
  "devDependencies": {
    "chai": "1.8.x",
    "express": ">=3.0.0",
    "mocha": "1.13.x",
    "sinon": "1.7.x"
  },
  "scripts": {
    "prepublish": "npm prune",
    "test": "node test.js"
  },
  "readme": "# Shrinkroute [![Build Status](https://travis-ci.org/gustavohenke/shrinkroute.png)](https://travis-ci.org/gustavohenke/shrinkroute) [![NPM version](https://badge.fury.io/js/shrinkroute.png)](http://badge.fury.io/js/shrinkroute) [![Dependency Status](https://gemnasium.com/gustavohenke/shrinkroute.png)](https://gemnasium.com/gustavohenke/shrinkroute)\r\n\r\nNamed and nested routes for Express 3+, with URL building support. Helps you in achieving DRY routes!\r\n\r\nEasy as that:\r\n```javascript\r\nvar shrinkr = shrinkroute( app, {\r\n    \"user\": {\r\n        path: \"/user/:id?\",\r\n        get: showOrListUsers,\r\n        post: [ requireAuthentication, createUser ],\r\n        put: [ requireAuthentication, updateUser ]\r\n    }\r\n});\r\n\r\n// To provide URL building helpers, the middleware needs to be used\r\napp.use( shrinkr.middleware );\r\n\r\n// in your routes...\r\nfunction createUser( req, res, next ) {\r\n    User.create(..., function( err, userId ) {\r\n        // redirects to /user/1 (or any other userId...)\r\n        res.redirect( req.buildUrl( \"user\", { id: userId } ) );\r\n\r\n        // if full URLs are needed, try below - redirects to http://foobar.com/user/1\r\n        res.redirect( req.buildFullUrl( \"user\", { id: userId } ) );\r\n    });\r\n}\r\n\r\n// or views...\r\n<a href=\"<%= url( \"user\", { id: 1 }) %>\">User profile</a>\r\n<a href=\"<%= fullUrl( \"user\", { id: 1 }) %>\">User profile</a>\r\n```\r\n\r\n## Nested routes\r\n\r\nNested routes are separated by an character, which is by default `.` (you may customize it if you want). When you set nested routes, they'll inherit their parent's route.\r\nFor example:\r\n\r\n```javascript\r\nshrinkroute( app, {\r\n    \"admin\": {\r\n        path: \"/admin\"\r\n    },\r\n    \"admin.users\": {\r\n        path: \"/users\"\r\n    }\r\n});\r\n```\r\n\r\nThis will end up in a route named `admin` which map to `/admin`, and another route named `admin.users` which map to `/admin/users`.\r\n\r\n## Installation\r\n\r\nInstall Shrinkroute via NPM:\r\n\r\n```shell\r\nnpm install shrinkroute\r\n```\r\n\r\n## API\r\n\r\n### `[new] shrinkroute( [app][, routes][, separator = \".\"] )`\r\nReturns a new instance of Shrinkroute. This is a shortcut for the following:\r\n\r\n```javascript\r\nvar shrinkr = shrinkroute();\r\nshrinkr.app( app );\r\nshrinkr.routes( routes );\r\nshrinkr.separator( separator );\r\n```\r\n\r\n### `.app( [app] )`\r\nGet or set the app of this Shrinkroute instance.\r\nIf setting the app, the following things will be available from now on:\r\n\r\n* `app.shrinkroute` - the Shrinkroute instance\r\n* `req.route.name` - the name of the matched route\r\n\r\n## `.middleware`\r\nThis is the Express middleware responsible for giving the following helpers to your request/response objects:\r\n* `req.buildUrl` and `res.locals.url` - builds paths for a route. The same as using `shrinkr.url()`.\r\n* `req.buildFullUrl` and `res.locals.fullUrl` - builds full URLs for a route. The same as using `shrinkr.fullUrl()`.\r\n\r\n### `.route( name[, route])`\r\nGet or set a route by its name.\r\n\r\n### `.route( [routes] )`\r\nGet or set all routes at once.\r\n\r\n### `.separator( [separator] )`\r\nGet or set the routes namespace separator. Useful for when using nested routes.\r\n\r\n### `.url( name[, params][, append] )`\r\nBuild the URL for a route. If the route path has parameters in the Express style (`:param`), they must be passed as a object in the `params` argument:\r\n\r\n```javascript\r\nshrinkr.url( \"user\", {\r\n    id: 1\r\n});\r\n```\r\n\r\nIf they're not passed, the returned URL will be blank. However, if you mark it as optional (`:param?`), it'll not be required.\r\n\r\nParameters passed in the `params` object that are not defined in the route will be appended to the query string, unless the `append` argument is falsy.\r\n\r\n```javascript\r\nshrinkr.url( \"users\", {\r\n    name: \"foo\"\r\n});\r\n\r\n// => /users?name=foo\r\n\r\nshrinkr.url( \"users\", {\r\n    name: \"foo\"\r\n}, false);\r\n\r\n// => /users\r\n```\r\n\r\n### `.fullUrl( name[, params][, append] )`\r\nBuilds full URLs for a given route that include protocol, host and port. Respects the same rules as `.url()`.\r\n\r\n```javascript\r\nreq.buildFullUrl( \"users\", {\r\n  name: \"foo\"\r\n});\r\n\r\n// => http://foobar.com/users?name=foo\r\n```\r\n\r\n## Testing\r\n\r\nShrinkroute is tested with [Mocha](http://visionmedia.github.io/mocha). Inside the project root, run:\r\n\r\n```shell\r\nnpm install -d\r\nnpm test\r\n```\r\n\r\nThis will do the job for you!",
  "readmeFilename": "README.md",
  "_id": "shrinkroute@0.2.2",
  "dist": {
    "shasum": "f6de117f341c02b749379eb51cd49083e18050fb"
  },
  "_from": "shrinkroute@*",
  "_resolved": "https://registry.npmjs.org/shrinkroute/-/shrinkroute-0.2.2.tgz"
}
